import asyncio
import logging
import pandas as pd
from collections import deque
from datetime import datetime, timedelta
import signal
import sys
from binance.streams import BinanceSocketManager
from binance.async_client import AsyncClient

import config
from telegram_bot_handler import TelegramBotHandler
from binance_handler import BinanceHandler
from strategy import Strategy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    handlers = []
    
    # –í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(logging.Formatter(log_format))
    handlers.append(console_handler)
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    if config.LOG_TO_FILE:
        file_handler = logging.FileHandler(config.LOG_FILE, encoding='utf-8')
        file_handler.setFormatter(logging.Formatter(log_format))
        handlers.append(file_handler)
    
    logging.basicConfig(
        level=getattr(logging, config.LOG_LEVEL),
        format=log_format,
        handlers=handlers
    )

setup_logging()
logger = logging.getLogger(__name__)

class CryptoScalpingBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        self.symbol_kline_data = {}  # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
        self.symbol_open_interest_data = {}  # –î–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞
        self.last_signal_time = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–¥–ª—è cooldown)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞
        self.telegram_bot = TelegramBotHandler()
        self.binance_handler = BinanceHandler()
        self.strategy_checker = Strategy()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.running = False
        self.reconnect_count = 0
        self.last_heartbeat = datetime.now()
        
        # WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.client = None
        self.websocket_manager = None
        
        logger.info("Crypto Scalping Bot initialized")

    async def send_startup_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        startup_msg = (
            "üöÄ *Crypto Scalping Bot Started*\n\n"
            f"Environment: {config.ENVIRONMENT.upper()}\n"
            f"Volume Filter: ${config.VOLUME_THRESHOLD_USD/1_000_000:.0f}M\n"
            f"Timeframe: {config.TIMEFRAME}\n"
            f"RSI Period: {config.RSI_PERIOD}\n"
            f"Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        await self.telegram_bot.send_message(startup_msg)
        logger.info("Startup message sent")

    async def send_heartbeat(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        current_time = datetime.now()
        if (current_time - self.last_heartbeat).total_seconds() >= config.HEARTBEAT_INTERVAL:
            active_symbols = len([s for s in self.symbol_kline_data.keys() 
                                if s in self.symbol_kline_data and len(self.symbol_kline_data[s]) > 0])
            
            status_msg = (
                f"üíì *Bot Status Update*\n\n"
                f"Active symbols: {active_symbols}\n"
                f"Reconnects: {self.reconnect_count}\n"
                f"Uptime: {current_time.strftime('%H:%M:%S')}\n"
                f"Environment: {config.ENVIRONMENT}\n"
                f"Memory usage: {len(self.symbol_kline_data)} symbols tracked"
            )
            await self.telegram_bot.send_message(status_msg)
            self.last_heartbeat = current_time
            logger.debug("Heartbeat sent")

    async def process_message(self, msg):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ WebSocket"""
        try:
            stream_name = msg.get('stream', '')
            data = msg.get('data', {})
            event_type = data.get('e')

            if not event_type or not stream_name:
                logger.debug("Received message without event type or stream name")
                return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∏–º–∞
            try:
                symbol = stream_name.split('@')[0].upper()
            except IndexError:
                logger.warning(f"Could not extract symbol from stream: {stream_name}")
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            if event_type == 'kline' and stream_name.endswith(f'@kline_{config.TIMEFRAME}'):
                await self.process_kline_data(symbol, data)
            elif event_type == 'forceOrder' and '@forceOrder' in stream_name:
                await self.process_open_interest_data(symbol, data)
            else:
                logger.debug(f"Unhandled event type: {event_type} for stream: {stream_name}")
                
        except Exception as e:
            logger.error(f"Error processing WebSocket message: {e}")

    async def process_kline_data(self, symbol, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π (kline)"""
        try:
            kline_data = data.get('k')
            if not kline_data:
                logger.warning(f"No kline data in message for {symbol}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å
            is_kline_closed = kline_data.get('x', False)
            if not is_kline_closed:
                logger.debug(f"Kline not closed yet for {symbol}")
                return

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            try:
                new_kline_entry = {
                    'timestamp': pd.to_datetime(kline_data['t'], unit='ms'),
                    'open': float(kline_data['o']),
                    'high': float(kline_data['h']),
                    'low': float(kline_data['l']),
                    'close': float(kline_data['c']),
                    'volume': float(kline_data['v'])
                }
            except (KeyError, ValueError) as e:
                logger.error(f"Error parsing kline data for {symbol}: {e}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            if symbol not in self.symbol_kline_data:
                logger.warning(f"Symbol {symbol} not in tracked symbols")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É –≤ –æ—á–µ—Ä–µ–¥—å
            self.symbol_kline_data[symbol].append(new_kline_entry)
            logger.debug(f"Added new kline for {symbol}: close={new_kline_entry['close']}")
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            klines_df = pd.DataFrame(list(self.symbol_kline_data[symbol]))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ
            current_oi_info = self.symbol_open_interest_data.get(symbol, {})
            current_oi = current_oi_info.get('current_oi')
            prev_oi = current_oi_info.get('prev_oi')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —Å–∏–≥–Ω–∞–ª–∞–º–∏)
            if symbol in self.last_signal_time:
                time_since_last = (datetime.now() - self.last_signal_time[symbol]).total_seconds()
                if time_since_last < config.COOLDOWN_BETWEEN_SIGNALS:
                    logger.debug(f"Cooldown active for {symbol}: {time_since_last:.0f}s remaining")
                    return

            # –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–∫—Ä—ã—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ, –ø–æ–ª—É—á–∞–µ–º –∏—Ö
            if current_oi is None:
                logger.debug(f"Getting initial open interest data for {symbol}")
                current_oi = await self.binance_handler.get_open_interest(symbol)
                if current_oi is not None:
                    self.symbol_open_interest_data[symbol] = {
                        'current_oi': current_oi,
                        'prev_oi': None,
                        'timestamp': datetime.now().timestamp()
                    }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ —Å–∏–≥–Ω–∞–ª
            signal = self.strategy_checker.process_kline_data(symbol, klines_df, current_oi, prev_oi)
            if signal:
                await self.telegram_bot.send_message(signal)
                self.last_signal_time[symbol] = datetime.now()
                logger.info(f"Trading signal sent for {symbol}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞
            if current_oi is not None and symbol in self.symbol_open_interest_data:
                self.symbol_open_interest_data[symbol]['prev_oi'] = current_oi

        except Exception as e:
            logger.error(f"Error processing kline data for {symbol}: {e}")

    async def process_open_interest_data(self, symbol, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏–∑ force order stream"""
        try:
            # Force order stream –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞
            # –≠—Ç–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω–æ WebSocket –¥–ª—è OI –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º
            logger.debug(f"Force order event for {symbol} - updating OI data")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ —á–µ—Ä–µ–∑ REST API
            current_oi = await self.binance_handler.get_open_interest(symbol)
            
            if current_oi is not None:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞
                if symbol not in self.symbol_open_interest_data:
                    self.symbol_open_interest_data[symbol] = {
                        'current_oi': current_oi,
                        'prev_oi': None,
                        'timestamp': datetime.now().timestamp()
                    }
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    prev_oi = self.symbol_open_interest_data[symbol]['current_oi']
                    self.symbol_open_interest_data[symbol]['prev_oi'] = prev_oi
                    self.symbol_open_interest_data[symbol]['current_oi'] = current_oi
                    self.symbol_open_interest_data[symbol]['timestamp'] = datetime.now().timestamp()

                logger.debug(f"Updated open interest for {symbol}: {current_oi}")

        except Exception as e:
            logger.error(f"Error processing open interest data for {symbol}: {e}")

    async def initialize_symbols(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        logger.info("Starting symbol initialization...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if not config.SYMBOLS_TO_MONITOR:
                logger.info("Getting all tradable futures symbols...")
                all_symbols = await self.binance_handler.get_tradable_futures_symbols()
                if not all_symbols:
                    raise Exception("Failed to get tradable symbols")
                
                logger.info(f"Found {len(all_symbols)} tradable symbols, filtering by volume...")
                monitored_symbols = await self.binance_handler.filter_symbols_by_volume(all_symbols)
            else:
                monitored_symbols = config.SYMBOLS_TO_MONITOR
                logger.info(f"Using predefined symbols: {monitored_symbols}")

            if not monitored_symbols:
                logger.warning("No symbols found for monitoring")
                await self.telegram_bot.send_message("‚ö†Ô∏è No symbols found for monitoring")
                return []

            logger.info(f"Monitoring {len(monitored_symbols)} symbols: {', '.join(monitored_symbols[:10])}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            symbol_list_msg = f"‚úÖ Starting to track {len(monitored_symbols)} coins:\n"
            if len(monitored_symbols) <= 20:
                symbol_list_msg += f"{', '.join(monitored_symbols)}"
            else:
                symbol_list_msg += f"{', '.join(monitored_symbols[:20])} and {len(monitored_symbols)-20} more..."
                
            await self.telegram_bot.send_message(symbol_list_msg)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            successful_symbols = []
            for i, symbol in enumerate(monitored_symbols):
                try:
                    logger.info(f"Loading historical data for {symbol} ({i+1}/{len(monitored_symbols)})")
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
                    initial_klines_df = await self.binance_handler.get_initial_klines(symbol)
                    if not initial_klines_df.empty:
                        self.symbol_kline_data[symbol] = deque(
                            initial_klines_df.to_dict('records'),
                            maxlen=config.KLINE_LIMIT + 20  # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        )
                        successful_symbols.append(symbol)
                        logger.debug(f"Loaded {len(initial_klines_df)} klines for {symbol}")
                    else:
                        logger.warning(f"No historical data available for {symbol}")
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–µ
                    initial_oi = await self.binance_handler.get_open_interest(symbol)
                    self.symbol_open_interest_data[symbol] = {
                        'current_oi': initial_oi,
                        'prev_oi': None,
                        'timestamp': datetime.now().timestamp()
                    }
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                    if i % 10 == 0 and i > 0:
                        await asyncio.sleep(1)
                        
                except Exception as e:
                    logger.error(f"Failed to initialize {symbol}: {e}")
                    continue

            logger.info(f"Successfully initialized {len(successful_symbols)} symbols")
            return successful_symbols

        except Exception as e:
            logger.error(f"Error during symbol initialization: {e}")
            await self.telegram_bot.send_message(f"üö® Error during initialization: {e}")
            return []

    async def setup_websocket_connection(self, symbols):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç—Ä–∏–º–∞–º–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ç–µ—Å—Ç–æ–≤–∞—è –ª–∏ —Å–µ—Ç—å
            is_testnet = "testnet" in config.BINANCE_FUTURES_BASE_URL_REST
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
            self.client = await AsyncClient.create(
                config.BINANCE_API_KEY,
                config.BINANCE_API_SECRET,
                testnet=is_testnet
            )
            self.websocket_manager = BinanceSocketManager(self.client)

            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–æ–≤
            streams = []
            active_symbols = [s for s in symbols if s in self.symbol_kline_data]
            
            for symbol in active_symbols:
                # –°—Ç—Ä–∏–º –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
                streams.append(f"{symbol.lower()}@kline_{config.TIMEFRAME}")
                # –°—Ç—Ä–∏–º force orders (–∫–∞–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π OI)
                streams.append(f"{symbol.lower()}@forceOrder")

            if not streams:
                raise Exception("No streams available for subscription")

            logger.info(f"Prepared {len(streams)} streams for {len(active_symbols)} symbols")
            return streams

        except Exception as e:
            logger.error(f"Error setting up WebSocket connection: {e}")
            raise

    async def run_websocket_loop(self, streams):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª WebSocket —Å –ª–æ–≥–∏–∫–æ–π –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        while self.running:
            try:
                logger.info("Connecting to WebSocket...")
                async with self.websocket_manager.multiplex_socket(streams) as socket:
                    logger.info("‚úÖ WebSocket connected successfully")
                    await self.telegram_bot.send_message("üîó WebSocket connected, monitoring started!")
                    self.reconnect_count = 0
                    
                    while self.running:
                        try:
                            # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                            msg = await asyncio.wait_for(socket.recv(), timeout=30.0)
                            await self.process_message(msg)
                            await self.send_heartbeat()
                            
                        except asyncio.TimeoutError:
                            logger.debug("WebSocket timeout, sending ping...")
                            continue
                        except Exception as e:
                            logger.error(f"Error processing WebSocket message: {e}")
                            await asyncio.sleep(1)

            except Exception as e:
                self.reconnect_count += 1
                logger.error(f"WebSocket connection error (attempt {self.reconnect_count}): {e}")
                
                if self.reconnect_count >= config.MAX_RECONNECT_ATTEMPTS:
                    logger.critical(f"Max reconnection attempts reached ({config.MAX_RECONNECT_ATTEMPTS})")
                    await self.telegram_bot.send_message("üö® Max reconnection attempts reached. Bot stopping.")
                    break
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
                wait_time = min(config.RECONNECT_DELAY * self.reconnect_count, 60)  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫
                logger.info(f"Waiting {wait_time} seconds before reconnection...")
                await asyncio.sleep(wait_time)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ Starting Crypto Scalping Bot...")
            self.running = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config.validate_config()
            logger.info("‚úÖ Configuration validated")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.telegram_bot.test_connection():
                raise Exception("Failed to connect to Telegram")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_startup_message()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã
            symbols = await self.initialize_symbols()
            if not symbols:
                raise Exception("No symbols available for monitoring")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebSocket
            streams = await self.setup_websocket_connection(symbols)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self.run_websocket_loop(streams)
            
        except Exception as e:
            logger.critical(f"Critical error in bot startup: {e}")
            await self.telegram_bot.send_error_alert(str(e), "STARTUP ERROR")
            raise
        finally:
            await self.cleanup()

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        logger.info("Cleaning up resources...")
        self.running = False
        
        if self.client:
            await self.client.close_connection()
            logger.info("Binance client connection closed")
        
        if self.binance_handler:
            await self.binance_handler.close_connection()
            logger.info("Binance handler closed")

    def handle_signal(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"Received signal {signum}, stopping bot...")
        self.running = False

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = CryptoScalpingBot()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    signal.signal(signal.SIGINT, bot.handle_signal)
    signal.signal(signal.SIGTERM, bot.handle_signal)
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.critical(f"Bot crashed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot terminated by user")
    except Exception as e:
        logger.critical(f"Failed to start bot: {e}")
        sys.exit(1)
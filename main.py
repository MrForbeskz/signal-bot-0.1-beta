import asyncio
import logging
import pandas as pd
from collections import deque
from binance import BinanceSocketManager
from binance.async_client import AsyncClient
import config
from telegram_bot_handler import TelegramBotHandler
from binance_handler import BinanceHandler
from strategy import Strategy

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

symbol_kline_data = {}  
symbol_open_interest_data = {}  

telegram_bot = TelegramBotHandler()
strategy_checker = Strategy()

async def process_message(msg):
    global symbol_kline_data, symbol_open_interest_data
    stream_name = msg.get('stream', '')
    data = msg.get('data', {})
    event_type = data.get('e')

    if not event_type or not stream_name:
        return

    try:
        symbol = stream_name.split('@')[0].upper()
    except IndexError:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–∏–º–≤–æ–ª –∏–∑ –ø–æ—Ç–æ–∫–∞: {stream_name}")
        return

    if event_type == 'kline' and stream_name.endswith(f'@kline_{config.TIMEFRAME}'):
        kline_data = data.get('k')
        if not kline_data:
            return
        is_kline_closed = kline_data.get('x', False)
        if is_kline_closed:
            try:
                new_kline_entry = {
                    'timestamp': pd.to_datetime(kline_data['t'], unit='ms'),
                    'open': float(kline_data['o']),
                    'high': float(kline_data['h']),
                    'low': float(kline_data['l']),
                    'close': float(kline_data['c']),
                    'volume': float(kline_data['v'])
                }
            except (KeyError, ValueError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏ –¥–ª—è {symbol}: {e}")
                return

            if symbol not in symbol_kline_data:
                return

            symbol_kline_data[symbol].append(new_kline_entry)
            klines_df = pd.DataFrame(list(symbol_kline_data[symbol]))
            current_oi_info = symbol_open_interest_data.get(symbol, {})
            current_oi = current_oi_info.get('current_oi')
            prev_oi = current_oi_info.get('prev_oi')
            signal = strategy_checker.process_kline_data(symbol, klines_df, current_oi, prev_oi)
            if signal:
                await telegram_bot.send_message(signal)  # –î–æ–±–∞–≤–ª–µ–Ω await

            if current_oi is not None and symbol in symbol_open_interest_data:
                symbol_open_interest_data[symbol]['prev_oi'] = current_oi

    elif event_type == 'openInterestUpdate' and stream_name.endswith('@openinterest'):
        oi_payload = data.get('i')
        if not oi_payload or oi_payload.get('symbol') != symbol:
            return
        try:
            oi_value = float(oi_payload['openInterest'])
            oi_timestamp = oi_payload['timestamp']
        except (KeyError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö openInterest –¥–ª—è {symbol}: {e}")
            return

        if symbol not in symbol_open_interest_data:
            symbol_open_interest_data[symbol] = {'current_oi': oi_value, 'prev_oi': None, 'timestamp': oi_timestamp}
        else:
            symbol_open_interest_data[symbol]['current_oi'] = oi_value
            symbol_open_interest_data[symbol]['timestamp'] = oi_timestamp

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await telegram_bot.send_message("üöÄ –ë–æ—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")  # –î–æ–±–∞–≤–ª–µ–Ω await

    sync_binance_handler = BinanceHandler()
    async_client = None

    try:
        if not config.SYMBOLS_TO_MONITOR:
            all_symbols = await sync_binance_handler.get_tradable_futures_symbols()
            monitored_symbols = await sync_binance_handler.filter_symbols_by_volume(all_symbols)
        else:
            monitored_symbols = config.SYMBOLS_TO_MONITOR

        if not monitored_symbols:
            logger.warning("–ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            await telegram_bot.send_message("‚ö†Ô∏è –ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")  # –î–æ–±–∞–≤–ª–µ–Ω await
            return

        logger.info(f"–°–∏–º–≤–æ–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ({len(monitored_symbols)}): {', '.join(monitored_symbols)}")
        await telegram_bot.send_message(f"‚úÖ –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å {len(monitored_symbols)} –º–æ–Ω–µ—Ç(—ã)")  # –î–æ–±–∞–≤–ª–µ–Ω await

        for symbol in monitored_symbols:
            initial_klines_df = await sync_binance_handler.get_initial_klines(symbol)
            if not initial_klines_df.empty:
                symbol_kline_data[symbol] = deque(initial_klines_df.to_dict('records'), maxlen=config.KLINE_LIMIT + 20)
            symbol_open_interest_data[symbol] = {'current_oi': None, 'prev_oi': None, 'timestamp': None}

        is_testnet = "testnet" in config.BINANCE_FUTURES_BASE_URL_REST
        async_client = await AsyncClient.create(
            config.BINANCE_API_KEY,
            config.BINANCE_API_SECRET,
            testnet=is_testnet
        )
        bsm = BinanceSocketManager(async_client)

        streams = []
        active_monitored_symbols = [s for s in monitored_symbols if s in symbol_kline_data]
        for symbol_to_watch in active_monitored_symbols:
            streams.append(f"{symbol_to_watch.lower()}@kline_{config.TIMEFRAME}")
            streams.append(f"{symbol_to_watch.lower()}@openinterest")

        if not streams:
            logger.error("–ù–µ—Ç –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
            await telegram_bot.send_message("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")  # –î–æ–±–∞–≤–ª–µ–Ω await
            return

        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫–∏: {streams}")

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å —Å WebSocket
        async with bsm.multiplex_socket(streams) as ms:
            while True:
                try:
                    msg = await ms.recv()
                    await process_message(msg)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    await asyncio.sleep(5)

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await telegram_bot.send_message(f"üÜò –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")  # –î–æ–±–∞–≤–ª–µ–Ω await
    finally:
        if async_client:
            await async_client.close_connection()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
        await telegram_bot.send_message("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")  # –î–æ–±–∞–≤–ª–µ–Ω await
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await telegram_bot.send_message(f"üÜò –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")  # –î–æ–±–∞–≤–ª–µ–Ω await